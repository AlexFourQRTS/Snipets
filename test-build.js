const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript
  console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript...');
  execSync('npx tsc --noEmit', { stdio: 'pipe' });
  console.log('‚úÖ TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∏ TypeScript:');
  console.error(error.stdout?.toString() || error.message);
  process.exit(1);
}

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É React
  console.log('‚öõÔ∏è –°–±–æ—Ä–∫–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  execSync('npx react-scripts build', { stdio: 'pipe' });
  console.log('‚úÖ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏ React:');
  console.error(error.stdout?.toString() || error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ build –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
if (fs.existsSync('build')) {
  console.log('‚úÖ –ü–∞–ø–∫–∞ build —Å–æ–∑–¥–∞–Ω–∞');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
  const requiredBuildFiles = [
    'build/index.html',
    'build/static/js/main.js',
    'build/static/css/main.css'
  ];
  
  requiredBuildFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file}`);
    } else {
      console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  });
} else {
  console.log('‚ùå –ü–∞–ø–∫–∞ build –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
  process.exit(1);
}

console.log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
