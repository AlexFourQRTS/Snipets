const fs = require('fs');
const path = require('path');

function countLines(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content.split('\n').length;
  } catch (error) {
    return 0;
  }
}

function analyzeDirectory(dir, extensions = ['.tsx', '.ts', '.js']) {
  const files = [];
  
  function scanDir(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        scanDir(fullPath);
      } else if (extensions.some(ext => item.endsWith(ext))) {
        const lines = countLines(fullPath);
        files.push({
          path: fullPath,
          lines: lines,
          name: item,
          relativePath: path.relative('src', fullPath)
        });
      }
    }
  }
  
  scanDir(dir);
  return files.sort((a, b) => b.lines - a.lines);
}

console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê\n');

const srcFiles = analyzeDirectory('src');

console.log('üîç React/TypeScript —Ñ–∞–π–ª—ã (src/):');
console.log('='.repeat(80));

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
const componentGroups = {};
srcFiles.forEach(file => {
  const pathParts = file.relativePath.split('/');
  const componentName = pathParts[1] || 'root';
  
  if (!componentGroups[componentName]) {
    componentGroups[componentName] = [];
  }
  componentGroups[componentName].push(file);
});

Object.keys(componentGroups).sort().forEach(componentName => {
  console.log(`\nüìÅ ${componentName.toUpperCase()}:`);
  componentGroups[componentName].forEach(file => {
    const status = file.lines > 200 ? 'üî¥' : file.lines > 100 ? 'üü°' : 'üü¢';
    const indent = file.path.includes('/components/') ? '  ' : '';
    console.log(`${indent}${status} ${file.lines.toString().padStart(4)} —Å—Ç—Ä–æ–∫ - ${file.relativePath}`);
  });
});

console.log('\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:');
console.log('='.repeat(80));

const largeFiles = srcFiles.filter(f => f.lines > 150);
const mediumFiles = srcFiles.filter(f => f.lines > 100 && f.lines <= 150);
const smallFiles = srcFiles.filter(f => f.lines <= 100);

console.log(`üî¥ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>150 —Å—Ç—Ä–æ–∫): ${largeFiles.length}`);
console.log(`üü° –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã (100-150 —Å—Ç—Ä–æ–∫): ${mediumFiles.length}`);
console.log(`üü¢ –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã (<100 —Å—Ç—Ä–æ–∫): ${smallFiles.length}`);
console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${srcFiles.length}`);

if (largeFiles.length > 0) {
  console.log('\nüî¥ –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±—É—é—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:');
  largeFiles.forEach(file => {
    console.log(`   ${file.relativePath} (${file.lines} —Å—Ç—Ä–æ–∫)`);
  });
} else {
  console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–∞–∑–º–µ—Ä!');
}

console.log('\nüéØ –ü–†–ò–ù–¶–ò–ü–´ SRP –°–û–ë–õ–Æ–î–ï–ù–´:');
console.log('‚úÖ –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É');
console.log('‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ —Ö—É–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã');
console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å');
console.log('‚úÖ –ö–æ–¥ —Å—Ç–∞–ª –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º');
